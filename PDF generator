import boto3
import io
import zipfile

import base64
import io

from PIL import Image

from boto3.dynamodb.conditions import Attr
import pandas as pd
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.lib.pagesizes import letter,A4
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.platypus import SimpleDocTemplate,Flowable, Table, TableStyle, Paragraph, Spacer, Image as RLImage
from reportlab.lib.styles import ParagraphStyle, getSampleStyleSheet
from reportlab.lib.units import inch
from datetime import datetime
from reportlab.lib.colors import black

# Initialize DynamoDB client
dynamodb = boto3.resource('dynamodb',region_name='ap-northeast-1')

def japanese_font_s3(bucket, key, local_path):
    s3 = boto3.client('s3',region_name='ap-northeast-1')
    s3.download_file(bucket, key, local_path)

# DynamoDから欲しいスマホンの情報を持って
def fetch_smartphone(table_name, phone_name):
    dynamodb = boto3.resource('dynamodb',region_name='ap-northeast-1')  # Replace 'your-region' with your AWS region
    table = dynamodb.Table(table_name)
    
    response = table.scan(FilterExpression=Attr('機種').eq(phone_name))
    return response['Items']
    
def fetch_benchmark(table_name, phone_name):
    dynamodb = boto3.resource('dynamodb',region_name='ap-northeast-1')  # Replace 'your-region' with your AWS region
    table = dynamodb.Table(table_name)
    
    response = table.scan(FilterExpression=Attr('Name').eq(phone_name))
    return response['Items']

#ある要素から\nを無くす  
def clean_element(data):
    if isinstance(data,str):
        return data.replace('\n','')
    else: 
        return data

#.map関数を利用して探した行の全ての要素に対して\nを無くす
def clean_row(data):
    new_data = [clean_element(item) for item in data]
    return new_data
    
#必要な情報だけを絞る    
def create_table(data,column):
    table_data = []
    # Iterate over each item in the data list
    for item in data:
        for acolumn in column:
            # Extract the values for each specified column from this item
            row = [acolumn,clean_element(item.get(acolumn, ''))]
            # Add this row of data to the table_data list
            table_data.append(row)

    return table_data
    
def create_table_initial(data,column):
    table_data = []
    # Iterate over each item in the data list
    for item in data:
        for acolumn in column:
            # Extract the values for each specified column from this item
            row = [acolumn,clean_element(item.get(acolumn, ''))]
            # Add this row of data to the table_data list
            table_data.append(row)

    return table_data
    
def create_table_nest(table,main_table,columnnest,columnbird,data):
    nest_table = [columnnest,Table(create_table(table,data,columnbird),style,colWidths=(1*inch,1*inch),rowHeights=(0.25*inch))]
    main_table.append(nest_table)
    return main_table
    
def append_table(column,table,style):
    innertable = Table(table,colWidths=(1*inch,1*inch),rowHeights=(0.25*inch,0.25*inch))
    innertable.setStyle(style)
    initialtable=[]
    column = column[0]
    print(column)
    row = [column,innertable]
    initialtable.append(row)
    #print(newtable)
    return initialtable

def upload_to_s3(file_path, bucket_name, object_name):
    # Create an S3 client
    s3 = boto3.client('s3')

    # Upload the file
    s3.upload_file(file_path, bucket_name, object_name)
    

def lambda_handler(event, context):

    phone_name = 'iPhone 15 Pro Max 256GB SIMフリー'
    phone_name1 = 'iPhone 13 Pro Max'

# ScrapingPhoneStatusからiPhone 14の情報を持ってくる 
    smartphone_data = fetch_smartphone('ScrapingPhoneStatus', phone_name)
    
    # kindomcome tableからiPhone 14のBenchmarkdataを持ってくる
    benchmark_data = fetch_benchmark('Benchmark', phone_name1)
    
    # 余白をなくす
    cleaned_smartphone_data = clean_row(smartphone_data)
    print(cleaned_smartphone_data)
    print("  !!!hello!!! ")
    cleaned_smartphone_benchmark_data = clean_row(benchmark_data)
    print(benchmark_data)
    #print(cleaned_smartphone_data)
    # 二つの情報を集める
    #combined_data = cleaned_smartphone_data + cleaned_smartphone_benchmark_data
    #print(combined_data)
    
    #絞りたい項目を指定
    column1 = ['機種']
    column2nest = ['値段']
    column2bird = ['最高価格(円)', '最低価格(円)']
    column3nest = ['スペック']
    column3bird = ['画面サイズ','カメラ']
    column4nest = ['ベンチマーク']
    column4bird = ['Singlecore','Multicore']
    # Create table for iPhone 14

    
    styles = getSampleStyleSheet()
    title_style = styles['Heading1']
    title_style.fontSize = 18
    title_style.alignment = 1  # Center alignment
    
    japanese_font_s3('japanesefont-s3','Noto_Sans_JP.zip', '/tmp/Noto_Sans_JP.zip')
    with zipfile.ZipFile('/tmp/Noto_Sans_JP.zip', 'r') as zip_ref:
        zip_ref.extractall('/tmp')
    pdfmetrics.registerFont(TTFont('NotoSansJP', '/tmp/Noto_Sans_JP/static/NotoSansJP-Regular.ttf'))
    custom_style = ParagraphStyle('CustomStyle', fontName='NotoSansJP', fontSize=12, leading=15)
    
    
    
    enhanced_table_style = TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.grey),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, -1), 'NotoSansJP'),
        #('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (1, 0), (-1, -1), colors.beige),
        ('VALIGN',(0,0),(-1,-1),'MIDDLE'),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('FONTSIZE', (0, 0), (-1, -1), 6),
        ('TOPPADDING', (1, 0), (1, 4), 0),
        ('BOTTOMPADDING', (1, 0), (1, 4), 0)
    ])
    
    nest_style = TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.grey),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, -1), 'NotoSansJP'),
        ('BACKGROUND', (1, 0), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('FONTSIZE', (0, 0), (-1, -1), 6),
        ('BOTTOMPADDING', (1, 0), (1, 4), 0),
    ])
    
    table_coloumn1 = create_table_initial(cleaned_smartphone_data, column1)
    table_coloumn2bird = create_table(cleaned_smartphone_data,column2bird)
    table_coloumn2nest = append_table(column2nest,table_coloumn2bird,nest_style)
    table_coloumn3bird = create_table(cleaned_smartphone_data,column3bird)
    table_coloumn3nest = append_table(column3nest,table_coloumn3bird,nest_style)
    table_coloumn4bird = create_table(cleaned_smartphone_benchmark_data,column4bird)
    table_coloumn4nest = append_table(column4nest,table_coloumn4bird,nest_style)
    #table_colummn2nest = tableappend(column2nest,ta)
    #table_coloumn2nest = create_table_nest(table,table_coloumn1,column2nest,column2bird,cleaned_smartphone_data)
    #table_coloumn3nest = create_table_nest(table,table_coloumn2nest,column3nest,column3bird,cleaned_smartphone_data)
    #table_coloumn4nest = create_table_nest(table,table_coloumn3nest,column4nest,column4bird,cleaned_smartphone_benchmark_data)
    smartphone_table_data = [table_coloumn1[0],table_coloumn2nest[0],table_coloumn3nest[0],table_coloumn4nest[0]]
    print(smartphone_table_data)
    
    # Create table objects with ehhanced style
    iphone_table = Table(smartphone_table_data,colWidths=(0.7*inch,2*inch),rowHeights=(0.5*inch,0.5*inch,0.5*inch,0.5*inch))
    iphone_table.setStyle(enhanced_table_style)
    test_table = Table(table_coloumn2nest,rowHeights = None)
    test_table.setStyle(enhanced_table_style)
    
    
    #スペックとおすすめポイントと他のレビューの表
    suggestion_style = ParagraphStyle(
        name = 'suggestion_style',
        fontName = 'NotoSansJP',
        fontSize = 12,
        alignment = 1
    )
    suggestion = 'あなたへのおすすめポイント'
    suggestion_point =  '<b><u>' + suggestion + '</u></b>'
    suggestion_point_paragraph = Paragraph(suggestion_point, suggestion_style)
    
    review = '<b><u>' + '他の日のリビュー' + '</u></b>'
    review_paragraph = Paragraph(review, suggestion_style)
    
    suggestion_element = '1.\n2.\n3.'
    
    review_element = '1.\n2.\n3.'
    
    data = [[iphone_table,'',suggestion_point_paragraph,'',''],
            ['','','','',''],
            ['',suggestion_element,'','',''],
            ['','','','',''],
            ['','',review_paragraph,'',''],
            ['','','','',''],
            ['',review_element,'','','']]
            
    info_table = Table(data,colWidths=(3.5*inch,0.1*inch,1.4*inch,1.3*inch,1.5*inch),rowHeights=(0.25*inch,0.25*inch, 2.0*inch,0.1*inch,0.25*inch,0.25*inch,2.0*inch))
    
    info_style = TableStyle([
        ('BACKGROUND', (0, 0), (0, 0), colors.purple),  # Set background color to purple
        ('TEXTCOLOR', (1, 0), (-1, -1), colors.black),
        ('BACKGROUND', (1,2), (1, 2), colors.palegreen),
        ('ALIGN', (1, 0),(-1,-1), 'LEFT'),  # Center the text
        
        ('VALIGN',(0,0),(0,6),'TOP'),

        ('SPAN', (0,0),(0,6)),
        #('SPAN',(1,0),(1,1)),
        
        #おすすめポイント表枠付け
        ('LINEABOVE',(2,0),(3,0),1,colors.black),
        ('LINEBEFORE',(2,0),(2,1),1,colors.black),
        ('LINEABOVE',(2,2),(3,2),1,colors.black),
        ('LINEBEFORE',(4,0),(4,1),1,colors.black),
        ('VALIGN',(2,0),(3,1),'MIDDLE'),
        ('SPAN',(2,0),(3,1)),
        ('SPAN',(1,2),(4,2)),
        ('BOX',(1,1),(4,2),1,colors.black),
        ('LINEABOVE',(2,1),(3,1),1,colors.transparent),
        ('BACKGROUND', (1,2), (4, 2), colors.palegreen),
        
        #おすすめポイント文字整列
        ('ALIGN',(2,0),(3,1),'CENTER'),
        ('ALIGN',(1,2),(4,2),'LEFT'),
        ('VALIGN',(1,2),(4,2),'MIDDLE'),
        
        
        #他の人のレビュー表
        ('BOX',(2,4),(2,5),1,colors.black),
        ('BOX',(1,5),(-1,-1),1,colors.black),
        ('LINEABOVE',(2,5),(2,5),1,colors.transparent),
        ('SPAN',(2,4),(2,5)),
        ('SPAN',(1,6),(4,6)),
        
        #他の人のレビュー文字整列
        ('VALIGN',(1,6),(4,6),'MIDDLE'),
        
        ('BACKGROUND', (1,6), (4, 6), colors.palegreen),
        ('FONTNAME', (0, 0), (-1, -1), 'NotoSansJP'),  # Set the font to Helvetica
        ('FONTSIZE', (0, 0), (-1, -1), 14),  # Set the font size to 14
        #('BOTTOMPADDING', (0, 0), (-1, -1), 12),  # Add some padding
        #('TOPPADDING', (0, 0), (-1, -1), 12),  # Add some padding
    ])

    info_table.setStyle(info_style)
    
    #-----------------------------------------------------------------------------------------------------------
    #写真と名前また、特徴が入った表
    
    # S3から写真を持って来る
    s3_client = boto3.client('s3')
    # Get the base64-encoded image data from S3
    base64_image_data = s3_client.get_object(Bucket='llm-chatbot-s3', Key=phone_name)['Body'].read()
    # Save the decoded image data to a BytesIO object
    image_stream = io.BytesIO(base64_image_data)
    # Use the image data from the BytesIO object
    smartphone_image = RLImage(image_stream, width=1.5*inch, height=1.5*inch)
    
    #スマホンの名前のBOLDとUNDERLINE
    bold_style = ParagraphStyle(
        name = 'smartphone_name_style',
        fontName = 'NotoSansJP',
        fontSize = 16
    )
    
    phone_name_bold =  '<b><u>' + phone_name + '</u></b>'
    phone_name_paragraph = Paragraph(phone_name_bold, bold_style)
    data = [[smartphone_image,'',phone_name_paragraph],
            ['','','スマホンの特徴1.\n2.\n3.']]
    picture_table = Table(data,colWidths=[1.5*inch,0.2*inch,A4[0]-4*inch],rowHeights=(0.3*inch, 1.1*inch))
    picture_style = TableStyle([
        
        #スマホン名前色
        ('TEXTCOLOR',(2,0),(2,0),colors.black),
        
        #スマホンの特徴色
        ('TEXTCOLOR',(2,1),(2,1),colors.blue),
        
        ('SPAN',(0,0),(0,1)),
        ('BACKGROUND',(0,0),(0,1),colors.palegreen),
        ('ALIGN',(2,0),(-1,-1),'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'NotoSansJP'),
        ('FONTSIZE', (0, 0), (-1, -1), 14),
        ('leftpadding',(1,0),(-1,-1),100),
        ('BACKGROUND',(2,0),(-1,-1),colors.yellow),
        ('VALIGN',(0,0),(-1,-1),'MIDDLE'),
        ('BOX',(0,0),(-1,-1),0,colors.transparent),
        ('INNERGRID',(0,0),(-1,-1),0,colors.transparent)
        ])
    picture_table.setStyle(picture_style)

    bucket_name = 'pdf-s3'  # Replace with your S3 bucket name
    pdf_object_name = f'{phone_name.replace(" ","-")}-report_test.pdf'
    
    # Create a byte stream buffer
    buffer = io.BytesIO()
    
    # Create a PDF document and write to buffer instead of a file
    page_width, page_height = A4

    # Set the margins
    left_margin = 1 * inch
    bottom_margin = 1 * inch
    right_margin = 1 * inch
    
    # Set the top margin to be 1.5 inches less than the default
    top_margin = 0* inch  # Adjust as needed
    
    # Create a SimpleDocTemplate with custom margins
    pdf = SimpleDocTemplate(buffer,
                            pagesize=A4,
                            leftMargin=left_margin,
                            rightMargin=right_margin,
                            topMargin=top_margin,
                            bottomMargin=bottom_margin)
    #pdf = SimpleDocTemplate(buffer, pagesize=A4)
    
    current_time = datetime.now()
    timestamp = current_time.strftime("%Y-%m-%d")
    
    timestamp_style = ParagraphStyle(
        'TimeStampStyle',
        fontName='NotoSansJP',
        fontSize=5,
        alignment=2,  # Right align
        textColor=black
    )
    
    timestamp_paragraph = Paragraph(f"生成日: {timestamp}", timestamp_style)
    #.spaceAfter = 0
    
    data = [["あなたにお勧めのSIMフリースマホン",''],
            ['',timestamp_paragraph]]
    title_table = Table(data,colWidths=(A4[0]/2,A4[0]/2),rowHeights=(0.4*inch, 0.2*inch))  # Adjust the width of the first column to move the title

    # Style the title table
    title_style = TableStyle([
        ('BACKGROUND', (0,0), (1, 0), colors.purple),  # Set background color to purple
        ('TEXTCOLOR', (0,0), (1, 0), colors.whitesmoke),  # Set text color to white
        ('TEXTCOLOR', (1,1), (1, 1), colors.black),
        ('BACKGROUND', (1,1), (1, 1), colors.palegreen),
        ('BACKGROUND', (0,1), (0, 1), colors.black),
        ('ALIGN', (0, 0),(1,0), 'CENTER'),  # Center the text
        ('ALIGN',(-1,-1),(-1,-1),'RIGHT'),
        ('LEFTPADDING', (-1, -1), (-1, -1), 0),
        ('RIGHTPADDING', (-1, -1), (-1, -1), 0),
        ('VALIGN',(-1,-1),(-1,-1),'BOTTOM'),
        ('SPAN', (0,0),(1,0)),
        ('FONTNAME', (0, 0), (-1, -1), 'NotoSansJP'),  # Set the font to Helvetica
        ('FONTSIZE', (0, 0), (-1, -1), 14),  # Set the font size to 14
        ('BOTTOMPADDING', (0, 0), (1, 0), 12),  # Add some padding
        ('TOPPADDING', (0, 0), (1, 0), 12),  # Add some padding
        ('BOTTOMPADDING', (-1, -1), (-1, -1), 0),  # Add some padding
        ('TOPPADDING', (-1, -1), (-1, -1), 0),  # Add some padding
    ])

    title_table.setStyle(title_style)
    
    
    
    # Assemble the PDF document
    elements = [
        title_table,
        Spacer(1,0.05 * inch),
        #Paragraph("あなたにお勧めのdSIMフリースマホン", custom_style),
        #Spacer(1, 0.25 * inch),
        #Paragraph(f"{phone_name}に関する情報を集めてみました", custom_style),
        picture_table,
       #smartphone_image,  # 写真添付
        Spacer(1, 0.05 * inch),
        #iphone_table, #表添付
        Spacer(1, 0.05 * inch),
        info_table
        #test_table,
        #Spacer(1,0.5 * inch)
    ]
    
    print(type(test_table))
    print(type(iphone_table))
    
    
    pdf.build(elements)
    
    # Go to the start of the buffer
    buffer.seek(0)
    
    # Upload the buffer content to S3
    s3 = boto3.client('s3')
    s3.upload_fileobj(buffer, bucket_name, pdf_object_name)
    
    # Close the buffer
    buffer.close()

    url = s3_client.generate_presigned_url(
    'get_object',
    Params={'Bucket': bucket_name, 'Key': pdf_object_name},
    ExpiresIn=3600  # The URL will be valid for 1 hour
    )
    
    
    return {"message": "Pdf uploaded successfully to S3"}
