import boto3
import io
import zipfile
import json

import base64
import io

from PIL import Image

from boto3.dynamodb.conditions import Attr
import pandas as pd
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.lib.pagesizes import letter,A4
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.platypus import SimpleDocTemplate,Flowable, Table, PageBreak, TableStyle, Paragraph, Spacer, Image as RLImage
from reportlab.lib.styles import ParagraphStyle, getSampleStyleSheet
from reportlab.lib.units import inch
from datetime import datetime
from reportlab.lib.colors import black,blue,red
from reportlab.lib.utils import simpleSplit
from reportlab.pdfbase.pdfmetrics import stringWidth

# Initialize DynamoDB client
dynamodb = boto3.resource('dynamodb',region_name='ap-northeast-1')

def japanese_font_s3(bucket, key, local_path):
    s3 = boto3.client('s3',region_name='ap-northeast-1')
    s3.download_file(bucket, key, local_path)

# DynamoDから欲しいスマホンの情報を持って
def fetch_smartphone(table_name, phone_name):
    dynamodb = boto3.resource('dynamodb',region_name='ap-northeast-1')  # Replace 'your-region' with your AWS region
    table = dynamodb.Table(table_name)
    
    response = table.scan(FilterExpression=Attr('機種').eq(phone_name))
    return response['Items']
    
def fetch_benchmark(table_name, phone_name):
    dynamodb = boto3.resource('dynamodb',region_name='ap-northeast-1')  # Replace 'your-region' with your AWS region
    table = dynamodb.Table(table_name)
    
    response = table.scan(FilterExpression=Attr('Name').eq(phone_name))
    return response['Items']

#ある要素から\nを無くす  
def clean_element(data):
    if isinstance(data,str):
        return data.replace('\n','')
    else: 
        return data

#.map関数を利用して探した行の全ての要素に対して\nを無くす
def clean_row(data):
    new_data = [clean_element(item) for item in data]
    return new_data

def simpleSplit(text, font_name, font_size, max_width):
    lines = []
    current_line = ""
    current_width = 0

    for word in text.split():
        word_width = stringWidth(word, font_name, font_size)

        if current_width + word_width <= max_width:
            current_line += " " + word
            current_width += word_width
        else:
            lines.append(current_line.strip())
            current_line = word
            current_width = word_width

    if current_line:
        lines.append(current_line.strip())

    return lines
    
def set_height(smartphone_height_data):
    i = 0
    count = len(smartphone_height_data)
    while i <count:
        if(smartphone_height_data[i]==0):
            smartphone_height_data[i] = 1*0.25*inch
        else:
            smartphone_height_data[i] = smartphone_height_data[i]*0.25*inch
        i = i+1
    smartphone_height_data=tuple(smartphone_height_data)
    return smartphone_height_data
    

    
#必要な情報だけを絞る    
def create_table(data,column,font_name,font_size,spec_style):
    table_data = []
    height = []
    # Iterate over each item in the data list
    for acolumn in column:
        if isinstance(data,str):
            print("Error: 'data' is a string, but it should be a list of dictionaries.")
            print(data)
            break;
        element = data.get(acolumn, '')
        if element is None:
            element = ''  # Ensure element is never None
        #wrapped_lines = simpleSplit(element, font_name, font_size, 1*inch)
        #print("Wrapped_lines is")
        #print(wrapped_lines)
        #num_of_lines = len(wrapped_lines)
        #lines.append(num_of_lines)
        #print(num_of_lines)
        # Extract the values for each specified column from this item
    
        element_paragraph = Paragraph(element,spec_style)
        w, h = element_paragraph.wrap(1.5*inch, None)
        print('Element height is!')
        print(h)
        if(h<18):
            h = 18
        
        height.append(h)
        print(height)
        row = [acolumn,element_paragraph]
        # Add this row of data to the table_data list
        table_data.append(row)

    return table_data,height
    
def create_table_initial(data,column):
    table_data = []
    # Iterate over each item in the data list
    for item in data:
        for acolumn in column:
            # Extract the values for each specified column from this item
            row = [acolumn,clean_element(item.get(acolumn, ''))]
            # Add this row of data to the table_data list
            table_data.append(row)

    return table_data
    
def create_table_nest(table,main_table,columnnest,columnbird,data):
    nest_table = [columnnest,Table(create_table(table,data,columnbird),style,colWidths=(1*inch,1*inch),rowHeights=(0.25*inch))]
    main_table.append(nest_table)
    return main_table
    
def append_table(column,table,style,table_columnbird_height):
    height = tuple(table_columnbird_height)
    #print("The height for the table is : ")
    #print(height)
    innertable = Table(table,colWidths=(1*inch,1.5*inch))
    #rowHeights=height)
    innertable.setStyle(style)
    initialtable=[]
    column = column[0]
    #print(column)
    row = [column,innertable]
    initialtable.append(row)
    #print(newtable)
    return initialtable

def upload_to_s3(file_path, bucket_name, object_name):
    # Create an S3 client
    s3 = boto3.client('s3')

    # Upload the file
    s3.upload_file(file_path, bucket_name, object_name)
    
def total_height(table):
    a = 0
    for i in range(len(table)):
        a = a + table[i]
    return a

def create_phone_table(smartphone_data,benchmark_data,column1,column2nest,column2bird,column3nest,column3bird,column4nest,column4bird,nest_style,spec_style):
    #table_column1 = create_table_initial(smartphone_data, column1)
    fontname = 'NotoSansJP'
    fontsize = 6
    table2 = create_table(smartphone_data,column2bird,fontname,fontsize,spec_style)
    table_column2bird_height = table2[1]
    print(table_column2bird_height)
    table_column2bird = table2[0]
    table_column2nest = append_table(column2nest,table_column2bird,nest_style,table_column2bird_height)
    table3 = create_table(smartphone_data,column3bird,fontname,fontsize,spec_style)
    table_column3bird_height = table3[1]
    table_column3bird = table3[0]
    table_column3nest = append_table(column3nest,table_column3bird,nest_style,table_column3bird_height)
    table4 = create_table(benchmark_data,column4bird,fontname,fontsize,spec_style)
    table_column4bird_height = table4[1]
    table_column4bird = table4[0]
    table_column4nest = append_table(column4nest,table_column4bird,nest_style,table_column4bird_height)
    smartphone_table_data = [table_column2nest[0],table_column3nest[0],table_column4nest[0]]
    table_height_data = [total_height(table2[1]),total_height(table3[1]),total_height(table4[1])]
    #print(table_height_data)
    #print(smartphone_table_data)
    return smartphone_table_data,table_height_data

def get_photo(phone_name,s3_client,A,B):
    
    # Get the base64-encoded image data from S3
    base64_image_data = s3_client.get_object(Bucket='llm-chatbot-s3', Key=phone_name)['Body'].read()
    # Save the decoded image data to a BytesIO object
    image_stream = io.BytesIO(base64_image_data)
    # Use the image data from the BytesIO object
    smartphone_image = RLImage(image_stream, width=A*inch, height=B*inch)
    return smartphone_image
    
def make_picture_table(bold_style,phone_name,phone1_feature,picture_style,feature_style,smartphone_image):
    phone_name_bold =  '<b>' + phone_name + '</b>'
    phone_name_paragraph = Paragraph(phone_name_bold, bold_style)
    phone_feat1 = phone1_feature[0]
    phone_feat2 = phone1_feature[1]
    phone_feat3 = phone1_feature[2]
    #phone_features = '特徴1- ' + phone_feat1 + '<br/>' + '特徴2- ' + phone_feat2 + '<br/>' + '特徴3- ' + phone_feat3
    phone_feat_paragraph1 = Paragraph(phone_feat1, feature_style)
    phone_feat_paragraph2 = Paragraph(phone_feat2, feature_style)
    phone_feat_paragraph3 = Paragraph(phone_feat3, feature_style)
    phone_features_paragraph = [phone_feat_paragraph1,phone_feat_paragraph2,phone_feat_paragraph3]
    #phone_features_paragraph = Paragraph(phone_features, feature_style)
    data = [[smartphone_image,'',phone_name_paragraph],
            ['','',phone_features_paragraph]]
    picture_table = Table(data,colWidths=[1.5*inch,0.2*inch,A4[0]-2.5*inch],rowHeights=(0.3*inch, 1.2*inch))
    picture_table.setStyle(picture_style)
    return picture_table
    
def make_info_table(phone_table,suggestion_element,review_element,info_style,review_style,suggestion_element_style,suggestion_style):
    suggestion = 'あなたへのおすすめポイント'
    suggestion_point =  '<u>' + suggestion + '</u>'
    suggestion_point_paragraph = Paragraph(suggestion_point, suggestion_style)
    review = '<u>' + 'あなたに似た人評価' + '</u>'
    review_paragraph = Paragraph(review, suggestion_style)
    
    suggestion1 = suggestion_element[0]
    suggestion2 = suggestion_element[1]
    suggestion3 = suggestion_element[2]
    
    suggestion_element_paragraph1 = Paragraph(suggestion1, suggestion_element_style)
    suggestion_element_paragraph2 = Paragraph(suggestion2, suggestion_element_style)
    suggestion_element_paragraph3 = Paragraph(suggestion3, suggestion_element_style)
    suggestion_elements_paragraphs = [suggestion_element_paragraph1,suggestion_element_paragraph2,suggestion_element_paragraph3]
    
    review_elements_paragraph=[]
    for areview in review_element:
        areview_paragraph = Paragraph(areview,  review_style)
        review_elements_paragraph.append(areview_paragraph)
        
    #review1 = review_element[0]
    #review2 = review_element[1]
    #review3 = review_element[2]
    #review_element_paragraph1 = Paragraph(review1,  review_style)
    #review_element_paragraph2 = Paragraph(review2,  review_style)
    #review_element_paragraph3 = Paragraph(sreview3,  review_style)
    #review_elements_paragraphs = [review_element_paragraph1,review_element_paragraph2,review_element_paragraph3]
    
    data = [[phone_table,'',suggestion_point_paragraph,'',''],
            ['','','','',''],
            ['',suggestion_elements_paragraphs,'','',''],
            ['','','','',''],
            ['','',review_paragraph,'',''],
            ['','','','',''],
            ['',review_elements_paragraph,'','','']]
            
    info_table = Table(data,colWidths=(3.5*inch,0.1*inch,1.8*inch,0.7*inch,1.5*inch))
    #rowHeights=(0.12*inch,0.12*inch, 1.4*inch,0.1*inch,0.16*inch,0.16*inch,1.0*inch))
    info_table.setStyle(info_style)
    return info_table
    
def get_suggestion_element(smartphone_data):
    keys_to_include = ['compelling1','compelling2','compelling3']
    suggestion_list = []
    for key in keys_to_include:
        element = smartphone_data.get(key)
        if element is not None:
            suggestion_list.append(element)
    return suggestion_list
    
def get_review_element(smartphone_data):
    keys_to_include = ['compelling1','compelling2','compelling3']
    suggestion_list = []
    for key in keys_to_include:
        element = smartphone_data.get(key)
        if element is not None:
            suggestion_list.append(element)
    return suggestion_list
    
def get_benchmark_data(smartphone_data):
    benchmark_data ={}
    benchmark_data['SingleCore'] = smartphone_data.get('SingleCore')
    return benchmark_data
    
    
def lambda_handler(event, context):
    
    
    phone_info_with_compelling = event.get('phone_info_with_compelling')
    
    smartphone_data = phone_info_with_compelling[0]
    smartphone_data2 = phone_info_with_compelling[1]
    smartphone_data3 = phone_info_with_compelling[2]
    print(smartphone_data3)
    smartphone_data4 = phone_info_with_compelling[3]
    
    phone_name = smartphone_data.get('機種')
    phone_name2 = smartphone_data2.get('機種')
    phone_name3 = smartphone_data3.get('機種')
    phone_name4 = smartphone_data4.get('機種')
    
    phone1_feature = smartphone_data.get('特徴タイトル').split('@#$%^')
    phone2_feature = smartphone_data2.get('特徴タイトル').split('@#$%^')
    phone3_feature = smartphone_data3.get('特徴タイトル').split('@#$%^')
    phone4_feature = smartphone_data4.get('特徴タイトル').split('@#$%^')
    
    benchmark_data = get_benchmark_data(smartphone_data)
    benchmark_data2 = get_benchmark_data(smartphone_data2)
    benchmark_data3 = get_benchmark_data(smartphone_data3)
    benchmark_data4 = get_benchmark_data(smartphone_data4)
    
    suggestion_element1 = get_suggestion_element(smartphone_data)
    suggestion_element2 = get_suggestion_element(smartphone_data2)
    suggestion_element3 = get_suggestion_element(smartphone_data3)
    suggestion_element4 = get_suggestion_element(smartphone_data4)
    
    review_element1 = get_review_element(smartphone_data)
    review_element2 = get_review_element(smartphone_data2)
    review_element3 = get_review_element(smartphone_data3)
    review_element4 = get_review_element(smartphone_data4)
    

    #phone_name = 'iPhone 15 Pro Max 256GB SIMフリー' undo
    #phone_name1 = 'iPhone 13 Pro Max' undo
    
    #phone_name2 = 'Xperia 5 III SIMフリー' undo
    
    #def get_benchmark_data(gpt_phone_data):
    #    keys_to_exclude = ['特徴タイトル','その他の特徴本文',]
    #    smartphone_data = []
    #    for key,value in gpt_phone_data.items:
    #        if key in keys_to_exclude:
    #            smartphone_data[key] = value
    #    return benchmark_data
    #smartphone_data = get_smartphone_data(gpt_phone_data)

# ScrapingPhoneStatusからiPhone 14の情報を持ってくる 
    # undo smartphone_data = fetch_smartphone('ScrapingPhoneStatus', phone_name) #無くす
    # undo benchmark_data = fetch_benchmark('Benchmark', phone_name1) #無くす
    
    # undo smartphone_data2 = fetch_smartphone('ScrapingPhoneStatus', phone_name2) #無くす
    # undo benchmark_data2 = fetch_benchmark('Benchmark', phone_name1) #無くす
    
    # 余白をなくす
    #print(smartphone_data)
    #cleaned_smartphone_benchmark_data = clean_row(benchmark_data)
    #print(benchmark_data)

    #絞りたい項目を指定
    column1 = ['機種']
    column2nest = ['値段']
    column2bird = ['最高価格(円)', '最低価格(円)']
    column3nest = ['スペック']
    column3bird = ['画面サイズ','背面カメラ画素数']
    column4nest = ['CPU性能']
    column4bird = ['SingleCore']
    # Create table for iPhone 14

    
    styles = getSampleStyleSheet()
    title_style = styles['Heading1']
    title_style.fontSize = 18
    title_style.alignment = 1  # Center alignment
    
    japanese_font_s3('japanesefont-s3','Noto_Sans_JP.zip', '/tmp/Noto_Sans_JP.zip')
    with zipfile.ZipFile('/tmp/Noto_Sans_JP.zip', 'r') as zip_ref:
        zip_ref.extractall('/tmp')
    pdfmetrics.registerFont(TTFont('NotoSansJP', '/tmp/Noto_Sans_JP/static/NotoSansJP-Regular.ttf'))
    custom_style = ParagraphStyle('CustomStyle', fontName='NotoSansJP', fontSize=12, leading=15)
    
    
    
    enhanced_table_style = TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.grey),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, -1), 'NotoSansJP'),
        #('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (1, 0), (-1, -1), colors.beige),
        ('VALIGN',(0,0),(-1,-1),'MIDDLE'),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('FONTSIZE', (0, 0), (-1, -1), 8),
        ('TOPPADDING', (1, 0), (1, 4), 0),
        ('BOTTOMPADDING', (1, 0), (1, 4), 0)
    ])
    
    nest_style = TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.grey),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, -1), 'NotoSansJP'),
        ('VALIGN',(0,0),(-1,-1),'MIDDLE'),
        ('BACKGROUND', (1, 0), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('FONTSIZE', (0, 0), (-1, -1), 8),
        #('BOTTOMPADDING', (1, 0), (1, 4), 0),
    ])
    
    spec_style = ParagraphStyle(
        name = 'feature_style',
        fontName = 'NotoSansJP',
        fontSize = 8,
        leading= 10,
        wordWrap='CJK',
        textColor= colors.black,
    )
    
    table_data = create_phone_table(smartphone_data,benchmark_data, column1,column2nest,column2bird,column3nest,column3bird,column4nest,column4bird,nest_style,spec_style)
    smartphone_table_data =table_data[0]
    smartphone_height_data = table_data[1]
    table_data2 = create_phone_table(smartphone_data2,benchmark_data2, column1,column2nest,column2bird,column3nest,column3bird,column4nest,column4bird,nest_style,spec_style)
    smartphone_table_data2 = table_data2[0]
    smartphone_height_data2 = table_data2[1]
    
    table_data3 = create_phone_table(smartphone_data3,benchmark_data3, column1,column2nest,column2bird,column3nest,column3bird,column4nest,column4bird,nest_style,spec_style)
    smartphone_table_data3 = table_data2[0]
    smartphone_height_data3 = table_data2[1]
    
    table_data4 = create_phone_table(smartphone_data4,benchmark_data4, column1,column2nest,column2bird,column3nest,column3bird,column4nest,column4bird,nest_style,spec_style)
    smartphone_table_data4 = table_data2[0]
    smartphone_height_data4 = table_data2[1]
   
    # Create table objects with ehhanced style
    #print('smartphone_height_data is')
    #print(smartphone_height_data)
    iphone_table = Table(smartphone_table_data,colWidths=(0.7*inch,2.5*inch))
    #rowHeights=smartphone_height_data)
    
    #print('smartphone_height_data2 is')
    #print(smartphone_height_data2)
    phone_table2 = Table(smartphone_table_data2,colWidths=(0.7*inch,2.5*inch))
    #rowHeights=smartphone_height_data2)
    iphone_table.setStyle(enhanced_table_style)
    phone_table2.setStyle(enhanced_table_style)
    
    phone_table3 = Table(smartphone_table_data3,colWidths=(0.7*inch,2.5*inch))
    phone_table3.setStyle(enhanced_table_style)
    
    phone_table4 = Table(smartphone_table_data4,colWidths=(0.7*inch,2.5*inch))
    phone_table4.setStyle(enhanced_table_style)
    
    
    #スペックとおすすめポイントと他のレビューの表
    suggestion_style = ParagraphStyle(
        name = 'suggestion_style',
        fontName = 'NotoSansJP',
        fontSize = 12,
        alignment = 1,
        borderPadding = 0
    )
    
    review_style = ParagraphStyle(
        name = 'feature_style',
        fontName = 'NotoSansJP',
        fontSize = 11,
        leading= 14,
        wordWrap='CJK',
        textColor= colors.black,
        bulletColor=colors.black,
        bulletFontName = "ZapfDingbats",
        bulletFontSize = 5,
        bulletText='-',
        leftIndent = 7
    )
    
    suggestion_element_style = ParagraphStyle(
        name = 'feature_style',
        fontName = 'NotoSansJP',
        fontSize = 11,
        leading= 14,
        wordWrap='CJK',
        textColor= colors.black,
        bulletColor=colors.black,
        bulletFontName = "ZapfDingbats",
        bulletFontSize = 5,
        bulletText='-',
        leftIndent = 7
    )
    
    info_style = TableStyle([
        #('BACKGROUND', (0, 0), (0, 0), colors.purple),  # Set background color to purple
        ('TEXTCOLOR', (1, 0), (-1, -1), colors.black),
        #('BACKGROUND', (1,2), (1, 2), colors.palegreen),
        ('ALIGN', (1, 0),(-1,-1), 'LEFT'),  # Center the text
        
        ('VALIGN',(0,0),(0,6),'TOP'),

        ('SPAN', (0,0),(0,6)),
        #('SPAN',(1,0),(1,1)),
        
        #おすすめポイント表枠付け
        ('LINEABOVE',(2,0),(3,0),1,colors.black),
        ('LINEBEFORE',(2,0),(2,1),1,colors.black),
        ('LINEABOVE',(2,2),(3,2),1,colors.black),
        ('LINEBEFORE',(4,0),(4,1),1,colors.black),
        ('VALIGN',(1,0),(3,1),'MIDDLE'),
        ('SPAN',(2,0),(3,1)),
        ('SPAN',(1,2),(4,2)),
        ('BOX',(1,1),(4,2),1,colors.black),
        ('LINEABOVE',(2,1),(3,1),1,colors.transparent),
        #('BACKGROUND', (1,2), (4, 2), colors.palegreen),
        
        #おすすめポイント文字整列
        ('ALIGN',(2,0),(3,1),'CENTER'),
        ('ALIGN',(1,2),(4,2),'LEFT'),
        ('VALIGN',(1,2),(4,2),'MIDDLE'),
        ('VALIGN',(1,0),(4,1),'MIDDLE'),
        #('VALIGN',(1,0),(4,0),'TOP'),
        
        
        #他の人のレビュー表
        ('BOX',(2,4),(2,5),1,colors.black),
        ('BOX',(1,5),(-1,-1),1,colors.black),
        ('LINEABOVE',(2,5),(2,5),1,colors.transparent),
        ('SPAN',(2,4),(2,5)),
        ('SPAN',(1,6),(4,6)),
        
        #他の人のレビュー文字整列
        ('VALIGN',(1,0),(4,6),'MIDDLE'),
        ('VALIGN',(1,6),(4,6),'MIDDLE'),
        
        #('BACKGROUND', (1,6), (4, 6), colors.palegreen),
        ('FONTNAME', (0, 0), (-1, -1), 'NotoSansJP'),  # Set the font to Helvetica
        ('FONTSIZE', (0, 0), (-1, -1), 14),  # Set the font size to 14
        ('BOTTOMPADDING', (1, 0), (4, 1), 0),  # Add some padding
        ('TOPPADDING', (1, 4), (4, 5), 0),  # Add some padding
    ])

    #info_table.setStyle(info_style)
    #suggestion_element1 =['スムーズなディスプレイで没入感のある視聴体験','音楽や動画をたくさん保存できる 256GB ストレージ','スマホデビューする子ども向けの「ジュニアモード」']
    #review_element1 =['スムーズなディスプレイで没入感のある視聴体験。変な感じになればいいな変化 f じゃいお f ジオエアイオ f ジェいう jフォアい','音楽や動画をたくさん保存できる 256GB ストレージ']
    info_table = make_info_table(iphone_table,suggestion_element1,review_element1,info_style,review_style,suggestion_element_style,suggestion_style)

    #suggestion_element2 =['白い2','黒い2','黄色い2']
    #review_element2 =['親にお勧め出来ると思います2','画面が大きくて安心です！2','コースパが良くていいです！2']
    info_table2 = make_info_table(phone_table2,suggestion_element2,review_element2,info_style,review_style,suggestion_element_style,suggestion_style)
    info_table3 = make_info_table(phone_table3,suggestion_element3,review_element3,info_style,review_style,suggestion_element_style,suggestion_style)
    info_table4 = make_info_table(phone_table4,suggestion_element4,review_element4,info_style,review_style,suggestion_element_style,suggestion_style)
    
    #-----------------------------------------------------------------------------------------------------------
    #写真と名前また、特徴が入った表
    
    # S3から写真を持って来る
    s3_client = boto3.client('s3')
    
    smartphone_image = get_photo(phone_name,s3_client,1.5,1.5)
    smartphone_image2 = get_photo(phone_name2,s3_client,1.5,1.5)
    smartphone_image3 = get_photo(phone_name3,s3_client,1.5,1.5)
    smartphone_image4 = get_photo(phone_name4,s3_client,1.5,1.5)
    
    #スマホンの名前のBOLDとUNDERLINE
    bold_style = ParagraphStyle(
        name = 'smartphone_name_style',
        fontName = 'NotoSansJP',
        fontSize = 17
    )
    
    feature_style = ParagraphStyle(
        name = 'feature_style',
        fontName = 'NotoSansJP',
        fontSize = 12,
        leading= 14,
        wordWrap='CJK',
        textColor= colors.blue,
        bulletColor=colors.red,
        bulletFontName = "ZapfDingbats",
        bulletFontSize = 9,
        bulletText='•',
        leftIndent = 11
    )

    #phone1_feature = [' シンプルでコンパクトなデザインに、防水・防塵・耐衝撃対応の丈夫さを兼備', '筐体の再生プラスチック材使用率を約 60％へ向上し、より環境に配慮','スマホデビューする子ども向けの「ジュニアモード」、大きく太い文字で表示できる「かんたんモード」搭載']
    #phone2_feature = ['大きい2', '安い2','速い2']
    picture_style = TableStyle([
        
        #スマホン名前色
        ('TEXTCOLOR',(2,0),(2,0),colors.black),
        
        #スマホンの特徴色
        ('TEXTCOLOR',(2,1),(2,1),colors.blue),
        
        ('SPAN',(0,0),(0,1)),
        #('BACKGROUND',(0,0),(0,1),colors.palegreen),
        ('ALIGN',(2,0),(-1,-1),'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'NotoSansJP'),
        ('FONTSIZE', (0, 0), (-1, -1), 14),
        ('leftpadding',(1,0),(-1,-1),100),
        #('BACKGROUND',(2,0),(-1,-1),colors.yellow),
        ('VALIGN',(0,0),(-1,-1),'MIDDLE'),
        ('BOX',(0,0),(-1,-1),0,colors.transparent),
        ('INNERGRID',(0,0),(-1,-1),0,colors.transparent)
        ])
    
    picture_table = make_picture_table(bold_style,phone_name,phone1_feature,picture_style,feature_style,smartphone_image)
    picture_table2 = make_picture_table(bold_style,phone_name2,phone2_feature,picture_style,feature_style,smartphone_image2)
    picture_table3 = make_picture_table(bold_style,phone_name3,phone3_feature,picture_style,feature_style,smartphone_image3)
    picture_table4 = make_picture_table(bold_style,phone_name4,phone4_feature,picture_style,feature_style,smartphone_image4)

    bucket_name = 'pdf-s3'  # Replace with your S3 bucket name
    pdf_object_name = f'{phone_name.replace(" ","-")}-report_test.pdf'
    
    # Create a byte stream buffer
    buffer = io.BytesIO()
    
    # Create a PDF document and write to buffer instead of a file
    page_width, page_height = A4

    # Set the margins
    left_margin = 1 * inch
    bottom_margin = 1 * inch
    right_margin = 1 * inch
    
    # Set the top margin to be 1.5 inches less than the default
    top_margin = 1* inch  # Adjust as needed
    
    # Create a SimpleDocTemplate with custom margins
    pdf = SimpleDocTemplate(buffer,
                            pagesize=A4,
                            leftMargin=left_margin,
                            rightMargin=right_margin,
                            topMargin=top_margin,
                            bottomMargin=bottom_margin)
    #pdf = SimpleDocTemplate(buffer, pagesize=A4)
    
    current_time = datetime.now()
    timestamp = current_time.strftime("%Y-%m-%d")
    
    timestamp_style = ParagraphStyle(
        'TimeStampStyle',
        fontName='NotoSansJP',
        fontSize=5,
        alignment=2,  # Right align
        textColor=black,
        spaceAfter = 0,
        spaceBefore = 0
    )
    
    #title_style = ParagraphStyle(
    #    'TitleStyle',
    #    fontName='NotoSansJP',
    #    fontSize=24,
    #    alignment=1,
    #    textColor=black,
    #    borderPadding = 0
    #)
    
    timestamp_paragraph = Paragraph(f"生成日: {timestamp}", timestamp_style)
    #.spaceAfter = 0
    
    #title =  '<b>' + 'あなたにぴったりなスマホを探しました' + '</b>'
    #title_paragraph = Paragraph(title, title_style)
    
    data = [["あなたにお勧めのSIMフリースマホン",''],
            ['',timestamp_paragraph]]
    title_table = Table(data,colWidths=(A4[0]/2,A4[0]/2),rowHeights=(0.4*inch, 0.2*inch))  # Adjust the width of the first column to move the title

    # Style the title table
    title_style = TableStyle([
        ('BACKGROUND', (0,0), (1, 0), colors.purple),  # Set background color to purple
        ('TEXTCOLOR', (0,0), (1, 0), colors.whitesmoke),  # Set text color to white
        ('TEXTCOLOR', (1,1), (1, 1), colors.black),
        #('BACKGROUND', (1,1), (1, 1), colors.palegreen),
        #('BACKGROUND', (0,1), (0, 1), colors.black),
        ('ALIGN', (0, 0),(1,0), 'CENTER'),  # Center the text
        ('ALIGN',(-1,-1),(-1,-1),'RIGHT'),
        ('LEFTPADDING', (-1, -1), (-1, -1), 0),
        ('RIGHTPADDING', (-1, -1), (-1, -1), 0),
        ('VALIGN',(-1,-1),(-1,-1),'BOTTOM'),
        ('SPAN', (0,0),(1,0)),
        ('FONTNAME', (0, 0), (-1, -1), 'NotoSansJP'),  # Set the font to Helvetica
        ('FONTSIZE', (0, 0), (-1, -1), 14),  # Set the font size to 14
        ('BOTTOMPADDING', (0, 0), (1, 0), 12),  # Add some padding
        ('TOPPADDING', (0, 0), (1, 0), 12),  # Add some padding
        ('BOTTOMPADDING', (-1, -1), (-1, -1), 0),  # Add some padding
        ('TOPPADDING', (-1, -1), (-1, -1), 0),  # Add some padding
    ])

    title_style2 = TableStyle([
        ('VALIGN', (1, 0), (1, 0), 'MIDDLE'),
        ('VALIGN', (0, 1), (2, 1), 'BOTTOM'),
        ('ALIGN', (0, 0), (2, 0), 'CENTER'),
        ('ALIGN', (1, 1), (1, 1), 'RIGHT')
    ])
    title_table.setStyle(title_style)
    
    data = [['','','']]
    buffer_table = Table(data,colWidths=(0.3*inch,7.6*inch,0.3*inch),rowHeights=(0.1*inch))
    buffer_style = TableStyle([
        ('BACKGROUND', (1,0), (1, 0), colors.purple),  # Set background color to purple
    ])
    buffer_table.setStyle(buffer_style)
    
    
    # Assemble the PDF document
    elements = [
        title_table,
        Spacer(1,0.05 * inch),
        picture_table,
        Spacer(1, 0.1 * inch),
        info_table,
        Spacer(1, 0.05 * inch),
        buffer_table,
        Spacer(1, 0.05 * inch),
        picture_table2,
        Spacer(1, 0.05 * inch),
        info_table2,
        Spacer(1, 0.05 * inch),
        PageBreak(),
        title_table,
        Spacer(1,0.05 * inch),
        picture_table3,

        Spacer(1, 0.1 * inch),
        info_table3,
        Spacer(1, 0.15 * inch),
        buffer_table,
        Spacer(1, 0.15 * inch),
        picture_table4,
        Spacer(1, 0.05 * inch),
        info_table4,
        Spacer(1, 0.05 * inch),
    ]
    
    print(type(iphone_table))
    
    
    pdf.build(elements)
    
    # Go to the start of the buffer
    buffer.seek(0)
    
    # Upload the buffer content to S3
    s3 = boto3.client('s3')
    s3.upload_fileobj(buffer, bucket_name, pdf_object_name)
    
    # Close the buffer
    buffer.close()

    url = s3_client.generate_presigned_url(
    'get_object',
    Params={'Bucket': bucket_name, 'Key': pdf_object_name},
    ExpiresIn=3600  # The URL will be valid for 1 hour
    )
    
    
    return {"message": "Pdf uploaded successfully to S3"}
